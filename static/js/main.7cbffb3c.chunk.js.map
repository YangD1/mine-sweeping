{"version":3,"sources":["board.js","grids.js","information.js","customizeBoardForm.js","libs/Calculation.js","scoreShow.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","id","style","gridTemplateColumns","this","columns","gridTemplateRows","rows","children","React","Component","grids","element","color","index","gridsData","grid","elementClass","Array","isArray","length","flag","isOpen","className","type","background","value","onMouseUp","computeGrid","onMouseDown","aroundSink","isSink","Information","CustomBoard","state","onChange","columnsChange","rowsChange","mines","minesChange","onClick","onSubmit","Calculation","max","parseInt","maxGrids","top","bottom","left","right","aroundGridIndex","push","GameOver","gameInformation","scoreShow","display","isWin","gameAgain","App","currentIndex","gridsElement","gridsBoard","maxErr","calculation","time","e","i","createGridsData","gridsMax","currentItem","button","map","item","setState","findLinkBlankGrid","getAroundGridIndex","forEach","idx","conditionOfVictory","dangers","unprocessed","flags","finals","loop","arr","target","noSafes","filter","console","log","handleClick","event","excludeIndex","apply","key","gridsCount","keys","splice","Math","floor","random","preventDefault","fill","handleSubmit","document","getElementById","oncontextmenu","isNaN","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cbffb3c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n  }\n  render() {\n    return (\n      <div id=\"board\" style={{\n        gridTemplateColumns: \"repeat(\" + (this.props.columns || 9) + \", 25px)\",\n        gridTemplateRows: \"repeat(\" + (this.props.rows || 9) + \", 25px)\"\n      }}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default Board;","import React from 'react';\nimport './fonts/iconfont.css' // From https://www.iconfont.cn/\nclass grids extends React.Component {\n  render() {\n    let element;\n    const index = this.props.index;\n    const gridsData = this.props.gridsData;\n    const grid = this.props.gridsData[index];\n    let elementClass = \"\";\n    let color;\n\n    if (Array.isArray(gridsData) && gridsData.length > 0){\n      if(grid.flag && grid.isOpen === false){\n        element = <i className=\"iconfont iconhighest\"></i>;\n      }else{\n        switch (grid.type) {\n          case 'mine':\n            element = grid.isOpen && (\n              <div className=\"grid-item-box\" style={grid.flag ? { background: 'green' } : { background: 'red' }}>\n                <i className=\"iconfont iconzhadan\"></i>\n              </div>\n            );\n            break;\n          case 'default':\n            // create this gird element\n            if(grid.value){\n              // color switcher\n              switch (grid.value) {\n                case 1:\n                  color = 'blue';\n                  break;\n                case 2:\n                  color = 'green';\n                  break;\n                case 3:\n                  color = 'red';\n                  break;\n                case 4:\n                  color = 'purple';\n                  break;\n                case 5:\n                  color = 'orange';\n                  break;\n                default:\n                  color = 'black'\n                  break;\n              }\n            }\n\n            elementClass = \"grid-item-box\";\n            elementClass += grid.value ? ' number-hover' : '';\n\n            element = grid.isOpen && (\n              <div\n                className={elementClass}\n                style={{color: color}}\n                onMouseUp={this.props.computeGrid}\n                onMouseDown={this.props.aroundSink}\n              >\n                {grid.value || ''}\n              </div>\n            )\n\n            break;\n          default:\n            break;\n        }\n\n        if(!element && grid.isSink){\n          element = <div className='grid-sink'></div>\n        }\n      }\n    }\n\n    element = element ? element : <div></div>;\n    return element;\n  }\n}\n\nexport default grids;","import React from 'react'\nimport './css/information.css'\n\nclass Information extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render(){\n    return (\n      <div className=\"info-box\">\n        <span>Current Grid Index：</span>{ this.props.index }\n      </div>\n    )\n  }\n}\n\nexport default Information;","import React from 'react'\n\nclass CustomBoard extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      value: ''\n    }\n  }\n  render() {\n    return (\n      <form id=\"customize-board-form\">\n        <h4>Click and input your challenge:</h4>\n        <label>Cols:</label>\n        <input type=\"text\" value={this.props.columns} onChange={this.props.columnsChange} />\n        <br />\n        <label>Rows:</label>\n        <input type=\"text\" value={this.props.rows} onChange={this.props.rowsChange} />\n        <br />\n        <label>Mines:</label>\n        <input type=\"text\" value={this.props.mines} onChange={this.props.minesChange}/>\n        <br />\n        <button onClick={this.props.onSubmit}>Setting & Start!</button>\n      </form>\n    )\n  }\n}\n\nexport default CustomBoard;","class Calculation {\n  /**\n   * Calculates the element index around the current element\n   * @param {number} index\n   * @param {number} columns\n   * @param {number} rows\n   * @param {number} max\n   * @return {Array} around grids index\n   */\n  getAroundGridIndex(index, columns, rows, max){\n    index = parseInt(index);\n    columns = parseInt(columns);\n    rows = parseInt(rows);\n    max = parseInt(max);\n    const maxGrids = max || columns * rows;\n    const top = index - columns;\n    const bottom = index + columns;\n    const left = index - 1;\n    const right = index + 1;\n    let aroundGridIndex = [];\n\n    if (left >= 0 && index % columns > 0) {\n      aroundGridIndex.push(left)\n      if (top > 0) {\n        aroundGridIndex.push(top - 1)\n      }\n      if (bottom < maxGrids) {\n        aroundGridIndex.push(bottom - 1)\n      }\n    }\n    if (right > 0 && right % columns > 0) {\n      aroundGridIndex.push(right)\n      if (top >= 0) {\n        aroundGridIndex.push(top + 1)\n      }\n      if (bottom < maxGrids) {\n        aroundGridIndex.push(bottom + 1)\n      }\n    }\n    if (top >= 0) {\n      aroundGridIndex.push(top)\n    }\n    if (bottom < maxGrids) {\n      aroundGridIndex.push(bottom)\n    }\n\n    return aroundGridIndex;\n  }\n\n}\n\nexport default Calculation;","import React from 'react'\n\nclass GameOver extends React.Component {\n  render(){\n    let gameInformation = this.props.gameInformation;\n    const element = (\n      <div\n        style={this.props.scoreShow ? {display: \"flex\"} : {display: \"none\"}}\n        className={\"score-show \" + (gameInformation.isWin ? 'game-win' : 'game-over')}\n      >\n        <div className=\"title\">\n          {gameInformation.isWin ? 'You WIN!' : 'Game Over!'}\n        </div>\n        <div>\n          Game Info:\n          <div>\n            none\n          </div>\n        </div>\n        <div className=\"button\">\n          <button\n            onClick={this.props.gameAgain}\n            className='gameButton'\n          >Continue ?</button>\n        </div>\n      </div>\n    );\n    return element;\n  }\n}\n\nexport default GameOver;","import React from 'react';\nimport './fonts/iconfont.css' // From https://www.iconfont.cn/\nimport './css/App.css';\nimport Board from './board'\nimport Grids from './grids'\nimport Information from './information'\nimport CustomizeBoardForm from './customizeBoardForm'\nimport Calculation from './libs/Calculation'\nimport ScoreShow from './scoreShow'\n\nclass App extends React.Component{\n  state = {\n    currentIndex: 0,\n    gridsElement: [], // Grids Element\n    gridsData: [],   // Grids Data\n    columns: 10,\n    rows: 10,\n    mines: 20,\n    gridsBoard: {},\n    maxErr: false,\n    calculation: new Calculation(),\n    scoreShow: false,\n    gameInformation: {\n      isWin: false,\n      time: ''\n    }\n  }\n\n  handleClick(e, i){\n    // Create 'gridsData' or continue.\n    let gridsData = this.state.gridsData;\n    const gridsBoard = this.state.gridsBoard;\n    if( Array.isArray(gridsData) &&\n      gridsData.length === 0 ){\n      gridsData = this.createGridsData(e, i);\n    }\n\n    const columns = gridsBoard.columns;\n    const rows = gridsBoard.rows;\n    const gridsMax = columns * rows;\n\n    const currentItem = gridsData[i] || '';\n    if (!currentItem) return\n\n    if(e.button && e.button === 2){\n      // click right\n      if (currentItem.isOpen) return\n      gridsData[i].flag = !currentItem.flag;\n    }else{\n      // click left\n      if(currentItem.flag) return;\n\n      switch (currentItem.type) {\n        case 'mine':\n          this.state.gridsData.map(item => {\n            if(item.type === 'mine'){\n              item.isOpen = true;\n            }\n          })\n          this.setState({\n            scoreShow: true\n          })\n          break;\n        case 'default':\n          if(currentItem.value === 0){\n            const findLinkBlankGrid = this.findLinkBlankGrid(i, gridsData);\n            if(Array.isArray(findLinkBlankGrid) && findLinkBlankGrid.length === 0){\n              (this.state.calculation.getAroundGridIndex(\n                i,\n                columns,\n                rows,\n                gridsMax\n              )).forEach(idx => {\n                gridsData[idx].isOpen = true;\n              })\n            }else{\n              findLinkBlankGrid.forEach(index => {\n                gridsData[index].isOpen = true;\n                (this.state.calculation.getAroundGridIndex(\n                  index,\n                  columns,\n                  rows,\n                  gridsMax\n                )).forEach(idx => {\n                  gridsData[idx].isOpen = true;\n                })\n              });\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      gridsData[i].isOpen = true;\n    }\n\n    const conditionOfVictory = {\n      dangers: [],\n      unprocessed: [],\n      mines: this.state.gridsBoard.mines,\n      flags: [],\n    }\n    gridsData.forEach(item => {\n      if (item.type === 'mine' && item.flag === false) {\n        conditionOfVictory.dangers.push(item)\n      }\n      if (item.isOpen === false && item.flag === false) {\n        conditionOfVictory.unprocessed.push(item)\n      }\n      if (item.flag) {\n        conditionOfVictory.flags.push(item)\n      }\n    })\n    if(\n      conditionOfVictory.dangers.length === 0 &&\n      conditionOfVictory.unprocessed.length === 0 &&\n      conditionOfVictory.flags.length == conditionOfVictory.mines\n    ){\n      this.setState({\n        gameInformation: {\n          isWin: true\n        },\n        scoreShow: true\n      })\n    }\n\n    this.setState({\n      gridsData: gridsData,\n      currentIndex: i\n    })\n  }\n\n  /**\n   * Find the current grid linked blank girds index.\n   * @param {number} index\n   */\n  findLinkBlankGrid(index, gridsData){\n    if(!gridsData) gridsData = this.state.gridsData;\n    const columns = this.state.gridsBoard.columns;\n    const rows = this.state.gridsBoard.rows;\n    const gridsMax = columns * rows;\n    let finals = [];\n    let aroundGridIndex = (index) => this.state.calculation.getAroundGridIndex(\n      index,\n      columns,\n      rows,\n      gridsMax\n    );\n    const loop = arr => arr.forEach(i => {\n      if(gridsData[i].value === 0 && !gridsData[i].isOpen){\n        gridsData[i].isOpen = true;\n        finals.push(i)\n        loop(aroundGridIndex(i))\n      }\n    })\n    loop(aroundGridIndex(index))\n    finals.forEach(index => {\n      aroundGridIndex(index)\n    })\n    return finals;\n  }\n\n  // Input columns number.\n  columnsChange(e){\n    this.setState({\n      columns: e.target.value\n    })\n  }\n\n  // Input rows number.\n  rowsChange(e){\n    this.setState({\n      rows: e.target.value\n    })\n  }\n\n  // Input mines nubmer.\n  minesChange(e){\n    this.setState({\n      mines: e.target.value\n    })\n  }\n\n  /**\n   * aroundSink mousedown event\n   * @param {number} index\n   */\n  aroundSink(index) {\n    const gridsData = this.state.gridsData;\n    const columns = this.state.gridsBoard.columns;\n    const rows = this.state.gridsBoard.rows;\n    const aroundGridIndex = this.state.calculation.getAroundGridIndex( index, columns, rows)\n    aroundGridIndex.forEach(index => {\n      gridsData[index].isSink = true;\n    })\n    this.setState({\n      gridsData: gridsData\n    })\n  }\n\n  /**\n   * compute the gird around girds and set a state\n   * @param {number} index\n   */\n  computeGrid(index){\n    const gridsData = this.state.gridsData;\n    const grid = gridsData[index];\n    let noSafes = [];\n    let flags = [];\n    if(grid.isOpen && grid.value > 0){\n      const aroundGridIndex = this.state.calculation.getAroundGridIndex(\n        index,\n        this.state.gridsBoard.columns,\n        this.state.gridsBoard.rows\n      )\n\n      noSafes = aroundGridIndex.filter(index => {\n        return gridsData[index].type === 'mine' && gridsData[index].flag === false;\n      })\n\n      flags = aroundGridIndex.filter(index => {\n        return gridsData[index].flag === true;\n      })\n\n      console.log('找出这些下标？')\n      console.log(noSafes)  // 这里是答案 :x\n\n      aroundGridIndex.forEach(i => {\n        gridsData[i].isSink = false;\n        if(flags.length == grid.value) {\n          if(gridsData[i].flag === false){\n            gridsData[i].isOpen = true;\n            this.handleClick({button: 1}, i, gridsData)\n          }\n        }\n      })\n\n\n      this.setState({\n        gridsData: gridsData\n      })\n    }\n  }\n\n  /**\n   * Submit custom board and create girds data.\n   * @param {object} event\n   * @param {number} excludeIndex\n   */\n  createGridsData(event, excludeIndex){\n    let gridsData;\n    // setting rows and columns\n    if(this.state.columns > 80 || this.state.rows > 80){\n      // exceeded the max number\n      this.state.maxErr = true\n    }else{\n      gridsData = Array.apply(\n        null,\n        Array(this.state.gridsBoard.columns * this.state.gridsBoard.rows)).map((item, index) => {\n        return {\n          type: 'default',\n          value: 0,\n          flag: false,\n          isOpen: false,\n          isSink: false,\n          key: index\n        }\n      });\n\n      // Setting mines\n      let gridsCount = [...Array(gridsData.length).keys()];\n      const columns = this.state.gridsBoard.columns;\n      const rows = this.state.gridsBoard.rows;\n      const maxGrids = columns * rows;\n      gridsCount.splice(excludeIndex, 1)\n      for(let i=0; i<this.state.mines; i++){\n        let index = gridsCount.splice(Math.floor(Math.random() * gridsCount.length), 1);\n        let aroundGridIndex = this.state.calculation.getAroundGridIndex(index, columns, rows, maxGrids);\n        gridsData[index].type = 'mine';\n        aroundGridIndex.forEach(item => gridsData[item].value++)\n      }\n\n    }\n    this.setState({\n      gridsData: gridsData\n    })\n    event && event.preventDefault();\n    return gridsData;\n  }\n\n  handleSubmit(event){\n    let gridsMax = this.state.columns * this.state.rows;\n    this.setState({\n      gridsBoard: {\n        columns: this.state.columns,\n        rows: this.state.rows,\n        mines: this.state.mines\n      },\n      grids: Array(gridsMax).fill(<div className=\"full-squares\"></div>),\n      gridsData: [],\n      scoreShow: false\n    })\n    event && event.preventDefault();\n  }\n\n  componentDidMount(){\n    this.handleSubmit();\n    // Cancel mouse default event.\n    const element = document.getElementById('board');\n    element.oncontextmenu = function(e) {\n      e.preventDefault();\n    }\n  }\n\n  render(){\n    const gridsData = this.state.gridsData;\n    const gridsMax = this.state.gridsBoard.columns * this.state.gridsBoard.rows;\n    const gridsBoard = this.state.gridsBoard;\n    return (\n      // render element\n      <div className=\"App\">\n        <div className=\"app-body\">\n          <div className=\"app-body-form\">\n            <CustomizeBoardForm\n              columns={this.state.columns}\n              rows={this.state.rows}\n              mines={this.state.mines}\n              columnsChange={(e) => this.columnsChange(e)}\n              rowsChange={(e) => this.rowsChange(e)}\n              minesChange={(e) => this.minesChange(e)}\n              onSubmit={(e) => this.handleSubmit(e)}\n            />\n            <br />\n            <span className={'err-span'}>Cols / Rows MAX 80</span>\n          </div>\n          <Board\n            columns={this.state.gridsBoard.columns}\n            rows={this.state.gridsBoard.rows}\n          >\n            <ScoreShow\n              scoreShow={this.state.scoreShow}\n              gameAgain={() => this.handleSubmit()}\n              gameInformation = {this.state.gameInformation}\n            />\n            {[...Array(!isNaN(gridsMax) && gridsMax).keys()].map(index =>\n              <div\n                key={'item-' + index}\n                className=\"item\"\n                onMouseDown={(e) => this.handleClick(e, index)}\n              >\n                <div className=\"full-squares\">\n                  <Grids\n                    gridsData={gridsData}\n                    gridsBoard={gridsBoard}\n                    computeGrid={() => this.computeGrid(index)}\n                    aroundSink={() => this.aroundSink(index)}\n                    index={index}\n                    key={index}\n                  />\n                </div>\n              </div>\n            )}\n          </Board>\n          <Information index={this.state.currentIndex} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}